Story Sums (Challenges):
-----------------------

1) Express Number in Expanded Notation.
Create a function that takes a number and return a string with the number in expanded notation (AKA expanded form). See the resources tab for details on expanded notation.
Example:
expand(13) ➞ "10 + 3"
expand(86) ➞ "80 + 6"
expand(17000000) ➞ "10000000 + 7000000"
expand(5325) ➞ "5000 + 300 + 20 + 5"
Notes
You can expect only whole numbers greater than 0 as test input.

------------------------------------------------------------------
2) LCM of More Than Three Numbers
Create a function that takes an array of more than three numbers and returns the Least Common Multiple (LCM).

Examples:
lcmOfArray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 2520

lcmOfArray([13, 6, 17, 18, 19, 20, 37]) ➞ 27965340

lcmOfArray([44, 64, 12, 17, 65]) ➞ 2333760

Notes
The LCM of an array of numbers is the smallest positive number that is divisible by each of the numbers in the array.

Hint: gmp_gcd() and gmp_lcm() functions in PHP

------------------------------------------------------------------

3) Longest Word

Write a function that finds the longest word in a sentence and returns it. If two or more words are the biggest, return the word closest to the start of the sentence. Characters such as apostophe, commas, periods, etc count as letters (e.g. O'Connor is 8 characters long).

Examples

longestWord("Hello darkness my old friend") ➞ "darkness"

longestWord("Hello there mate") ➞ "Hello"

longestWord("Kayla's toy is plastic") ➞ "Kayla's"

------------------------------------------------------------------

4) Crowded Carriage Capacity

A train has a maximum capacity of $n passengers overall, which means each carriage's capacity will share an equal proportion of the maximum capacity.

Create a function which returns the index of the first carriage which holds 50% or less of its maximum capacity. If no such carriage exists, return -1.

Worked Example:

findASeat(200, [35, 23, 18, 10, 40]) ➞ 2

// There are 5 carriages which each have a maximum capacity of 40 (200 / 5 = 40).
// Index 0's carriage is too full (35 is 87.5% of the maximum).
// Index 1's carriage is too full (23 is 57.5% of the maximum).
// Index 2's carriage is good enough (18 is 45% of the maximum).
// Return 2.

Notes
•	This means if a train can hold 200 passengers, and has 5 carriages, then that means each carriage can hold a maximum of 40 passengers each.
•	All carriage numbers will be positive integers, which will be able to divide evenly.
•	Remember to return -1 if no carriage is empty enough.

Other Examples:
findASeat(20, [3, 5, 4, 2]) ➞ 3

findASeat(1000, [50, 20, 80, 90, 100, 60, 30, 50, 80, 60]) ➞ 0

findASeat(200, [35, 23, 40, 21, 38]) ➞ -1

------------------------------------------------------------------

5) ABACABA pattern

The ABACABA pattern is a recursive fractal pattern that shows up in many places in the real world (such as in geometry, art, music, poetry, number systems, literature and higher dimensions).

Create a function that takes a number n as an argument and returns a string that represents the full pattern.

Example:

abacabaPattern(1) ➞ "A"

abacabaPattern(2) ➞ "ABA"

abacabaPattern(3) ➞ "ABACABA"

Notes:
•	Result should always be uppercase.
•	Check the Resources tab for more info on the ABACABA pattern.
•	Read: https://en.wikipedia.org/wiki/ABACABA_pattern 

------------------------------------------------------------------

6) String Compression from Character Array

The function is given an array of characters. Compress the array into a string using the following rules. For each group of consecutively repeating characters:

If the number of repeating characters is one, append the string with only this character.

If the number n of repeating characters x is greater than one, append the string with "x" + n.

Examples:

compress(["t", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "s", "s", "s", "h"]) ➞ "te14s3h"

compress(["a", "a", "b", "b", "c", "c", "c"]) ➞ "a2b2c3"

compress(["a"]) ➞ "a"

compress(["a", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b"]) ➞ "ab12"

compress(["a", "a", "a", "b", "b", "a", "a"]) ➞ "a3b2a2"

------------------------------------------------------------------

7) Sort a String with the Given Template

The function is given two strings t - template, s - to be sorted. Sort the characters in s such that if the character is present in t then it is sorted according to the order in t and other characters are sorted alphabetically after the ones found in t.

Examples:

customSortt("edc", "abcdefzyx") ➞ "edcabfxyz"

customSortt("fby", "abcdefzyx") ➞ "fbyacdexz"

customSortt("", "abcdefzyx") ➞ "abcdefxyz"

customSortt("", "") ➞ ""

Notes:
The characters in t and s are all lower-case.

------------------------------------------------------------------

8) Translate from Human to Programmer

Replace the numbers in a string with their binary form.

Examples:

replaceNums("I have 2 sheep.") ➞ "I have 10 sheep."

replaceNums("My father was born in 1974.10.25.") ➞ "My father was born in 11110110110.1010.11001."

replaceNums("10hell76o4 boi") ➞ "1010hell1001100o100 boi"

9) Isograms

Determine the word is isograms or not?

Examples:
determineIsograms(“background”)➞true
determineIsograms(“six-year-old”)➞true
determineIsograms(“root”)➞false
determineIsograms(“isograms”)➞ false

------------------------------------------------------------------

10) Single Letter Swaps

Given an array of strings and an original string, write a function to output an array of boolean values - true if the word can be formed from the original word by swapping two letters only once and false otherwise.

Examples:

validateSwaps(["BACDE", "EBCDA", "BCDEA", "ACBED"], "ABCDE")
➞ [true, true, false, false]

// Swap "A" and "B" from "ABCDE" to get "BACDE".
// Swap "A" and "E" from "ABCDE" to get "EBCDA".
// Both "BCDEA" and "ACBED" cannot be formed from "ABCDE" using only a single swap.

validateSwaps(["32145", "12354", "15342", "12543"], "12345")
➞ [true, true, true, true]

validateSwaps(["9786", "9788", "97865", "7689"], "9768")
➞ [true, false, false, false]

Note:

Original string will consist of unique characters.
